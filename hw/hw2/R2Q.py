"""
@File    :   R2Q.py
@Time    :   2024/05/30 21:06:03
@Author  :   Xiang Lei 
@Version :   1.0
@Desc    :   Rotation matrix to quaternion
"""

import numpy as np


def rotation_matrix_to_quaternion(R):
    """
    Convert a rotation matrix to a quaternion.
    """
    qw = np.sqrt(1 + R[0, 0] + R[1, 1] + R[2, 2]) / 2
    qx = (R[2, 1] - R[1, 2]) / (4 * qw)
    qy = (R[0, 2] - R[2, 0]) / (4 * qw)
    qz = (R[1, 0] - R[0, 1]) / (4 * qw)
    return np.array([qx, qy, qz, qw])


R1 = np.array(
    [
        [0.9995022449081169, -0.02228731205085075, -0.02232796777996576],
        [0.02327221396012316, 0.9987218289448967, 0.04486772165325688],
        [0.02129944790433358, -0.04536500975981288, 0.9987433851638079],
    ]
)

Q1 = rotation_matrix_to_quaternion(R1)
print(Q1)


R2 = np.array(
    [
        [0.9993271651632516, -0.02380935075574116, -0.02789859823305237],
        [0.02578752878725596, 0.9970105384684507, 0.07283535914579099],
        [0.02608103383352796, -0.07350578888386956, 0.9969536993635835],
    ]
)

Q2 = rotation_matrix_to_quaternion(R2)
print(Q2)


R3 = np.array(
    [
        [0.9999387804176818, -0.00789985081120928, -0.007747759286362108],
        [0.008348647967931777, 0.9981805381149579, -0.05971526945129002],
        [0.007261920813829925, 0.05977629702225834, 0.9981853829927585],
    ]
)

Q3 = rotation_matrix_to_quaternion(R3)
print(Q3)


R4 = np.array(
    [
        [0.9999387804377085, -0.007899852155451604, -0.007747755331085923],
        [-0.008348649070264622, 0.9981805381312308, -0.05971526902516696],
        [0.007261916788970622, 0.05977629657287662, 0.9981853830489512],
    ]
)

Q4 = rotation_matrix_to_quaternion(R4)
print(Q4)
